name: "Terraform-Apply-Infra"

on:
  push:
    branches:
    - master
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      RUNNER_CFG_PAT: ${{ secrets.RUNNER_CFG_PAT }} 
      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Get GitHub organization or user
      run: echo 'USER='$(dirname ${GITHUB_REPOSITORY}) >> $GITHUB_ENV
      

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1    
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    
    - name: Terraform Init
      run: | 
        terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_ID }}
    
    - name: Terraform validate
      run: |
        terraform validate      

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'push'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Plan Status 
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
       
      
      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve  -var 'RUNNER_CFG_PAT=${ secrets.RUNNER_CFG_PAT }'
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_ID }}
        

#     - name: Terraform destroy
#       if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#       id: destroy
#       run: terraform destroy -auto-approve

    


    
